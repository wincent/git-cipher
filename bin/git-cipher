#!/usr/bin/env bash

set -e

# Script to facilitate running `git-cipher` from a development environment or in
# a local Git repository.
#
# Installs a copy of `node` into `vendor/node/` using `n` (in the submodule at
# `vendor/n/`). This modality is interesting for development purposes, or for
# very early bootstrapping on a system that doesn't yet have NodeJS on it (only
# Bash and Git are required).
#
# Alternatively, assuming a modern version of NodeJS is on the system, you can
# get a built copy with `npm install git-cipher`, and run it use `git cipher`.

# Get directory containing current script.
#
# Via: https://stackoverflow.com/a/246128/2103996
SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do
  DIRECTORY=$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIRECTORY/$SOURCE
done
DIRECTORY=$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)
ROOT="$DIRECTORY/.."

NODE_VERSION=18.7.0
VENDOR="$ROOT/vendor"
MAIN="$ROOT/lib/main.mjs"
N_EXE="$VENDOR/n/bin/n"
export N_PREFIX="$VENDOR/node"
YARN_EXE="$VENDOR/yarn/bin/yarn"
YARN_INTEGRITY="$ROOT/node_modules/.yarn-integrity"

node() {
  "$N_EXE" exec "$NODE_VERSION" "$@"
}

yarn() {
  node "$YARN_EXE" --cwd "$ROOT" "$@"
}

# ANSI color codes.
# https://stackoverflow.com/a/5947802/2103996
BOLD='\033[0;1m'
GREEN='\033[1;32m'
PURPLE='\033[1;35m'
RED='\033[1;31m'
RESET='\033[0m'
YELLOW='\033[1;33m'

# No associative arrays in Bash < v4, so can't do:
#
#     declare -A LOG_LEVEL
#
# Instead, we do:
#
LOG_LEVEL_EMERGENCY=0
LOG_LEVEL_ALERT=1
LOG_LEVEL_CRITICAL=2
LOG_LEVEL_ERROR=3
LOG_LEVEL_WARNING=4
LOG_LEVEL_NOTICE=5
LOG_LEVEL_INFO=6
LOG_LEVEL_DEBUG=7

LOG_LEVEL=$LOG_LEVEL_INFO

for VAR in "$@"
do
  if [[ $VAR = "--build" || $VAR = "-b" ]]; then
    BUILD=1
  elif [[ $VAR = "--debug" ]]; then
    LOG_LEVEL=$LOG_LEVEL_DEBUG
    DEBUG=1
  elif [[ $VAR = "--quiet" || $VAR = "-q" ]]; then
    LOG_LEVEL=$LOG_LEVEL_ERROR
    unset DEBUG
  fi
done

log_debug() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_DEBUG ]]; then
    echo -e "${PURPLE}[debug]  ${RESET} $*" >&2
  fi
}

log_error() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_ERROR ]]; then
    echo -e "${RED}[error]  ${RESET} $*" >&2
  fi
}

log_info() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_INFO ]]; then
    echo -e "${BOLD}[info]   ${RESET} $*" >&2
  fi
}

log_notice() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_NOTICE ]]; then
    echo -e "${GREEN}[notice] ${RESET} $*" >&2
  fi
}

log_warn() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_WARNING ]]; then
    echo -e "${YELLOW}[warning]${RESET} $*" >&2
  fi
}

if [[ ! -x "$N_EXE" ]]; then
  log_error "No executable at $N_EXE; did you forget to \`git submodule update\`?"
  exit 1
fi

if [[ -z $("$N_EXE" which "$NODE_VERSION") ]]; then
  log_info "Installing NodeJS $NODE_VERSION"
  "$N_EXE" "$NODE_VERSION"
else
  log_debug "Using existing NodeJS $NODE_VERSION installation"
fi

if [ ! -e "$YARN_INTEGRITY" ]; then
  log_error "No artifact at $YARN_INTEGRITY; did you forget to \`yarn\`? (running now)"
  yarn > /dev/null
fi

# TODO: properly detect up-to-date-ness of build, as opposed to just existence
if [ ! -e "$MAIN" ]; then
  log_error "No build artifact at $MAIN; did you forget to \`yarn run tsc\`? (running now)"
  yarn run tsc > /dev/null
fi

if [[ $BUILD -eq 1 ]]; then
  log_info "Running \`tsc\`"
  yarn run tsc
fi

exec env __DEV__=1 "$N_EXE" run "$NODE_VERSION" "$MAIN" "$@"
